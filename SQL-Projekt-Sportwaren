--DROP-Befehle zum löschen
DROP TABLE Ut_Vorgesetzte CASCADE CONSTRAINTS;
DROP TABLE Ut_Mitarbeiter CASCADE CONSTRAINTS;
DROP TABLE streetwear CASCADE CONSTRAINTS;
DROP TABLE sportartikel CASCADE CONSTRAINTS;
DROP TABLE Nicht_Veroeffentlichte_Projekte CASCADE CONSTRAINTS;
DROP TABLE Bestellungen CASCADE CONSTRAINTS;
DROP TABLE Lagerbestand CASCADE CONSTRAINTS;
DROP TABLE Abteilung CASCADE CONSTRAINTS;

DROP SEQUENCE ma_sq;
DROP SEQUENCE vg_sq;
DROP SEQUENCE sw_sq;
DROP SEQUENCE sp_sq;
DROP SEQUENCE np_sq;
DROP SEQUENCE bst_sq;
DROP SEQUENCE lg_sq;
DROP SEQUENCE abt_sq;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Erstellen von Sequenzen und Tabellen

CREATE SEQUENCE ma_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE vg_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE sw_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE sp_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE np_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE bst_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE lg_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE abt_sq START WITH 1 INCREMENT BY 1;


CREATE TABLE Streetwear (
    SW_Artikel_ID INT PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Kategorie VARCHAR2(50),
    Beschreibung VARCHAR2(200),
    Preis NUMBER,
    Bestand NUMBER,
    Material VARCHAR2(100),
    Groesse VARCHAR2(25),
    Farbe VARCHAR2(50),
    Marke VARCHAR2(100)
);
ALTER TABLE streetwear
ADD CONSTRAINT check_groesse
CHECK (groesse != 'XXL');


CREATE TABLE Sportartikel (
    SP_Artikel_ID INT PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Kategorie VARCHAR2(50),
    Beschreibung VARCHAR2(200),
    Preis NUMBER,
    Bestand NUMBER,
    Material VARCHAR2(100),
    Groesse VARCHAR2(25),
    Farbe VARCHAR2(50),
    Marke VARCHAR2(100)
);

CREATE TABLE Lagerbestand (
    Lagerbestand_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Kategorie VARCHAR2(50),
    Beschreibung VARCHAR2(200),
    Preis NUMBER,
    Bestand NUMBER,
    Material VARCHAR2(100),
    Groesse VARCHAR2(25),
    Farbe VARCHAR2(50),
    Marke VARCHAR2(100),
    sw_artikel_id INT,
    sp_artikel_id INT
);
ALTER TABLE Lagerbestand
ADD(CONSTRAINT lg_sw_fk FOREIGN KEY (sw_artikel_id)
REFERENCES streetwear(sw_artikel_id));

ALTER TABLE Lagerbestand
ADD(CONSTRAINT lg_sp_fk FOREIGN KEY (sp_artikel_id)
REFERENCES Sportartikel(sp_artikel_id));


CREATE TABLE Abteilung (
    Abteilungs_ID INT PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Standort VARCHAR2(50)
);

CREATE TABLE Ut_Mitarbeiter (
    Mitarbeiter_ID INT PRIMARY KEY,
    Vorname VARCHAR2(50),
    Nachname VARCHAR2(50),
    Position VARCHAR2(100),
    Gehalt NUMBER,
    Abteilungs_ID INT,
    Geburtsdatum DATE
);
ALTER TABLE Ut_Mitarbeiter
ADD(CONSTRAINT abt_fk FOREIGN KEY (Abteilungs_ID)
REFERENCES Abteilung(Abteilungs_ID));

CREATE TABLE Ut_Vorgesetzte (
    Vorgesetzte_ID INT PRIMARY KEY,
    Vorname VARCHAR2(50),
    Nachname VARCHAR2(50),
    Position VARCHAR2(100),
    Gehalt NUMBER,
    Abteilungs_ID INT,
    Geburtsdatum DATE,
    Mitarbeiter_ID INT
);
ALTER TABLE Ut_Vorgesetzte
ADD(CONSTRAINT mi_fk FOREIGN KEY (Mitarbeiter_ID)
REFERENCES Ut_Mitarbeiter(Mitarbeiter_ID));

ALTER TABLE Ut_Vorgesetzte
ADD(CONSTRAINT abt_fk2 FOREIGN KEY (Abteilungs_ID)
REFERENCES Abteilung(Abteilungs_ID));


CREATE TABLE Bestellungen (
    Bestell_ID INT PRIMARY KEY,
    Menge NUMBER,
    Einzelpreis DECIMAL(10, 2),
    Gesamtpreis DECIMAL(10, 2) DEFAULT NULL,
    SP_Artikel_ID INT,
    SW_Artikel_ID INT,
    Mitarbeiter_ID INT
    );
ALTER TABLE Bestellungen
ADD(CONSTRAINT ma_fk FOREIGN KEY (Mitarbeiter_ID)
REFERENCES Ut_Mitarbeiter(Mitarbeiter_ID));

ALTER TABLE Bestellungen
ADD(CONSTRAINT sp_fk FOREIGN KEY (sp_artikel_id)
REFERENCES Sportartikel(sp_Artikel_ID));

ALTER TABLE Bestellungen
ADD(CONSTRAINT sw_fk FOREIGN KEY (sw_artikel_id)
REFERENCES streetwear(sw_artikel_ID));


CREATE TABLE Nicht_Veroeffentlichte_Projekte (
    ProjektID INT PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Beschreibung VARCHAR2(500),
    Startdatum DATE,
    Enddatum DATE,
    Status VARCHAR2(50),
    Verantwortlicher INT,
    Mitarbeiter INT
);
ALTER TABLE Nicht_Veroeffentlichte_Projekte
ADD(CONSTRAINT vp_fk FOREIGN KEY (Verantwortlicher) 
REFERENCES Ut_Vorgesetzte(Vorgesetzte_ID));

ALTER TABLE Nicht_Veroeffentlichte_Projekte 
ADD(CONSTRAINT mp_fk FOREIGN KEY (Mitarbeiter) 
REFERENCES Ut_Mitarbeiter(Mitarbeiter_ID));

ALTER TABLE Nicht_Veroeffentlichte_Projekte
ADD (hashwert NUMBER);
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Erzeugen von TRIGGERn

--TRIGGER für Gesamtpreis
CREATE OR REPLACE TRIGGER berechne_gesamtpreis
BEFORE INSERT OR UPDATE ON Bestellungen
FOR EACH ROW
BEGIN
    IF :NEW.sp_artikel_id IS NOT NULL THEN
        :NEW.gesamtpreis := :NEW.einzelpreis * :NEW.menge;
    ELSIF :NEW.sw_Artikel_ID IS NOT NULL THEN
        :NEW.gesamtpreis := :NEW.einzelpreis * :NEW.menge;
    END IF;
END;

--TRIGGER zum automatischen einfügen von Datensätzen in die Tabelle Lagerbe-stand
CREATE OR REPLACE TRIGGER Streetwear_After_Insert
AFTER INSERT ON Streetwear
FOR EACH ROW
BEGIN
    INSERT INTO Lagerbestand (Bezeichnung, Kategorie, Beschreibung, Preis, Be-stand, Material, Groesse, Farbe, Marke)
    VALUES (:NEW.Bezeichnung, :NEW.Kategorie, :NEW.Beschreibung, :NEW.Preis, :NEW.Bestand, :NEW.Material, :NEW.Groesse, :NEW.Farbe, :NEW.Marke);
END;


CREATE OR REPLACE TRIGGER Sportartikel_After_Insert
AFTER INSERT ON Sportartikel
FOR EACH ROW
BEGIN
    INSERT INTO Lagerbestand (Bezeichnung, Kategorie, Beschreibung, Preis, Be-stand, Material, Groesse, Farbe, Marke)
    VALUES (:NEW.Bezeichnung, :NEW.Kategorie, :NEW.Beschreibung, :NEW.Preis, :NEW.Bestand, :NEW.Material, :NEW.Groesse, :NEW.Farbe, :NEW.Marke);
END;

--Trigger um ein Lost-Update zu verhindern
CREATE OR REPLACE TRIGGER lost_update
BEFORE UPDATE ON Lagerbestand
FOR EACH ROW
BEGIN
    IF :OLD.Bestand != :NEW.Bestand THEN
        RAISE_APPLICATION_ERROR(-20001, 'Datensatz wurde von einer anderen Transaktion geändert.');
    END IF;
END;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Inserts in Abteilungen
INSERT INTO Abteilung (Abteilungs_ID, Bezeichnung, Standort) 
VALUES 
(abt_sq.NEXTVAL, 'Management', 'Köln');

INSERT INTO Abteilung (Abteilungs_ID, Bezeichnung, Standort) 
VALUES 
(abt_sq.NEXTVAL, 'Verkauf', 'Köln');

INSERT INTO Abteilung (Abteilungs_ID, Bezeichnung, Standort) 
VALUES 
(abt_sq.NEXTVAL, 'Marketing', 'Gummersbach');



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Inserts in Mitarbeiter

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum)
VALUES(ma_sq.NEXTVAL, 'Anna', 'Schmidt', 'Manager', 3600, 1, TO_DATE('1988.09.20', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum)
VALUES(ma_sq.NEXTVAL,'Peter', 'Müller', 'Vertrieb', 3500, 1, TO_DATE('1985-02-10', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum)
VALUES (ma_sq.NEXTVAL, 'Hans', 'Schulz', 'Consultant', 3800, 1, TO_DATE('1987-07-12', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Carina', 'Wagner', 'Kassierer', 2100, 2, TO_DATE('1986-03-08', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Carina', 'Wagner', 'Verkäufer', 2400, 2, TO_DATE('1986-03-08', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES 
(ma_sq.NEXTVAL, 'Max', 'Meier', 'Verkäufer', 2400, 2, TO_DATE('1990.05.15', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum)
VALUES (ma_sq.NEXTVAL,'Laura', 'Meier', 'Ideation', 3200, 3, TO_DATE('1992-11-25', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Julia', 'Klein', 'Ideation', 3200, 3, TO_DATE('1991-06-18', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Erik', 'Lange', 'Analyst', 3400, 3, TO_DATE('1989-10-30', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Sarah', 'Schneider', 'Abteilungsleiter', 7500, 1, TO_DATE('1978-08-15', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Jannick', 'Jamann', 'Abteilungsleiter', 6000, 2, TO_DATE('1992-02-23', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Lothar', 'Schwarz', 'Abteilungsleiter', 6600, 3, TO_DATE('1980-04-25', 'YYYY-MM-DD'));

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Inserts in Vorgesetzte
INSERT INTO Ut_Vorgesetzte(Vorgesetzte_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum, Mitarbeiter_ID) 
VALUES 
(vg_sq.NEXTVAL, 'Sarah', 'Schneider', 'Abteilungsleiter', 7500, 1, TO_DATE('1978-08-15', 'YYYY-MM-DD'), 1);

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Jannick', 'Jamann', 'Abteilungsleiter', 6000, 2, TO_DATE('1992-02-23', 'YYYY-MM-DD'));

INSERT INTO Ut_Vorgesetzte(Vorgesetzte_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum, Mitarbeiter_ID) 
VALUES 
(vg_sq.NEXTVAL, 'Lothar', 'Schwarz', 'Abteilungsleiter', 6600, 3, TO_DATE('1980-04-25', 'YYYY-MM-DD'), 3);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Inserts in Streetwear
INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES 
(sw_sq.NEXTVAL, 'T-Shirt', 'Oberteile', 'Ein bequemes T-Shirt aus Baumwolle.', 20.00, 50, 'Baumwolle', 'M', 'Weiß', 'Puma');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Hoodie', 'Oberteile', 'Ein warmer Kapuzenpullover.', 40.00, 40, 'Baumwolle', 'L', 'Grau', 'Nike');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Sneakers', 'Schuhe', 'Stylische Sneakers für den Alltag.', 60.00, 25, 'Textil', '39', 'Schwarz', 'Adidas');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Shorts', 'Hosen', 'Kurze Shorts für den Sommer.', 30.00, 35, 'Baumwolle', 'S', 'Grün', 'Jako');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL,'Trainingshose', 'Hosen', 'Ein luftdurchlässiger Trainingsan-zug.', 35.00, 30, 'Polyester', 'M', 'Schwarz', 'Hummel');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Cap', 'Accessoires', 'Eine stylische Baseballkappe.', 25.00, 45, 'Textil', 'Einheitsgröße', 'Rot', 'Ellesse');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Jacke', 'Oberteile', 'Eine leichte Jacke für den Übergang.', 70.00, 20, 'Polyester', 'XL', 'Blau', 'New Era');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'T-Shirt', 'Oberteile', 'Ein sportliches T-Shirt.', 20.00, 50, 'Baumwolle', 'L', 'Weiß', 'Under Armour');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Shorts', 'Hosen', 'Leichte Shorts für Training und Freizeit.', 30.00, 40, 'Polyester', 'M', 'Blau', 'Champion');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Hoodie', 'Oberteile', 'Ein bequemer Kapuzenpullover.', 45.00, 35, 'Baumwolle', 'XL', 'Grau', 'Puma');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Inserts in Sportartikel
INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Fußball', 'Fußball', 'Ein gut verarbeiteter Fußball.', 25.00, 50, 'Leder', '5', 'Weiß', 'Adidas');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Laufschuhe', 'Schuhe', 'Leichte Laufschuhe mit guter Pols-terung.', 80.00, 30, 'Mesh', '42', 'Schwarz', 'Nike');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Tennisschläger', 'Tennis', 'Ein hochwertiger Tennisschläger für Wettkämpfe.', 120.00, 20, 'Graphit', 'M', 'Rot', 'Wilson');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Handball', 'Handball', 'Ein hochwertiger Handball mit festem Griff.', 30.00, 40, 'Synthetik', '1', 'Blau', 'Molten');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Basketball', 'Basketball', 'Ein schwarzer Basketball mit orangenen Streifen.', 40.00, 35, 'Gummi', '7', 'Orange', 'Spalding');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Golfbälle', 'Golf', 'Eine Packung mit hochwertigen Golfbäl-len.', 20.00, 25, 'Kunststoff', NULL, 'Weiß', 'Titleist');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Fahrradhelm', 'Fahrrad', 'Ein sicherer Fahrradhelm für Rad-fahrer', 50.00, 45, 'Polycarbonat', NULL, 'Rot', 'Bell');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Schwimmbrille', 'Schwimmen', 'Eine bequeme Schwimmbril-le.', 15.00, 60, 'Kunststoff', NULL, 'Blau', 'Speedo');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Skateboard', 'Skateboarding', 'Ein hochwertiges Skate-board.', 70.00, 20, 'Holz', '8', 'Blau', 'Element');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Jogginganzug', 'Laufen', 'Ein bequemer Jogginganzug.', 60.00, 30, 'Baumwolle', NULL, 'Grau', 'Nike');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Inserts in Nicht veröffentlichte Projekte
INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Sportartikel-Innovation', 'Forschungs- und Entwicklungspro-jek', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 1, 2);

INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Sportartikel-Innovation', 'Forschungs- und Entwicklungspro-jek', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 1, 3);

INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Sportartikel-Innovation', 'Forschungs- und Entwicklungspro-jek', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 1, 4);

INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Neues Sneaker-Design', 'Entwicklung eines neuen Sneak-er-Designs.', TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-09-30', 'YYYY-MM-DD'), 2, 1);

INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Neues Sneaker-Design', 'Entwicklung eines neuen Sneak-er-Designs.', TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-09-30', 'YYYY-MM-DD'), 2, 5);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Inserts in Bestellungen
INSERT INTO bestellungen (bestell_id, menge, einzelpreis, sp_artikel_id, sw_artikel_id, mitarbeiter_id)
VALUES (bst_sq.NEXTVAL, 5, 30.00, 3, NULL, 2);

INSERT INTO bestellungen (bestell_id, menge, einzelpreis, sp_artikel_id, sw_artikel_id, mitarbeiter_id)
VALUES (bst_sq.NEXTVAL, 2, 15.00, NULL, 1, 4);

INSERT INTO bestellungen (bestell_id, menge, einzelpreis, sp_artikel_id, sw_artikel_id, mitarbeiter_id)
VALUES (bst_sq.NEXTVAL, 3, 45.00, NULL, 1, 4);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Anzeige aller Tabellen mithilfe der SELECT-Anweisung
SELECT*FROM streetwear;
SELECT*FROM Sportartikel;
SELECT*FROM Nicht_Veroeffentlichte_Projekte;
SELECT*FROM ut_mitarbeiter;
SELECT*FROM ut_vorgesetzte;
SELECT*FROM Bestellungen;
SELECT*FROM Lagerbestand;
SELECT*FROM Abteilung;

--SELECT-Abfrage zur Ausgabe von Mitarbeitern über 35
SELECT DISTINCT mitarbeiter_id, nachname, geburtsdatum
FROM ut_mitarbeiter 
GROUP BY mitarbeiter_id, nachname, geburtsdatum
HAVING (SYSDATE - geburtsdatum) > 35*365
ORDER BY mitarbeiter_id ASC;

--Ein einfacher Join zur Ausgabe der Vorgesetzten über 44
SELECT DISTINCT m.mitarbeiter_id, m.nachname, m.geburtsdatum
FROM ut_mitarbeiter m 
JOIN ut_vorgesetzte v ON m.nachname = v.nachname
WHERE v.vorgesetzte_id IS NOT NULL
AND (SYSDATE - m.geburtsdatum) > 44*365
ORDER BY m.mitarbeiter_id ASC;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--VIEWS
DROP VIEW vw_ut_mitarbeiter;
CREATE VIEW vw_ut_mitarbeiter AS
SELECT*FROM ut_mitarbeiter;
SELECT*FROM vw_ut_mitarbeiter;
GRANT SELECT ON vw_ut_mitarbeiter TO user_1;

DROP VIEW Mitarbeiter_View;
CREATE VIEW Mitarbeiter_View AS
SELECT * FROM ut_Mitarbeiter;

--Eingeschränkte Spalten
DROP VIEW Mitarbeiter_Namen;
CREATE VIEW Mitarbeiter_Namen AS
SELECT Vorname, Nachname FROM ut_Mitarbeiter;


--Aggregation in der View
DROP VIEW gehalt_sum_abt;
CREATE VIEW gehalt_sum_abt AS
SELECT Abteilungs_ID, SUM(Gehalt) AS Gesamtgehalt
FROM ut_Mitarbeiter
GROUP BY Abteilungs_ID;

SELECT * FROM gehalt_sum_abt;

--Verknüpfte Tabellen in der View
DROP VIEW Mitarbeiter_Information;
CREATE VIEW Mitarbeiter_Information AS
SELECT M.Vorname, M.Nachname, A.Bezeichnung
FROM ut_Mitarbeiter M
JOIN Abteilung A ON M.Abteilungs_ID = A.Abteilungs_ID;

SELECT * FROM Mitarbeiter_Information;

--View mit Bedingung
DROP VIEW hochbezahlte_Mitarbeiter;
CREATE VIEW Hochbezahlte_Mitarbeiter AS
SELECT Vorname, Nachname, Gehalt
FROM ut_Mitarbeiter
WHERE Gehalt > 6000;    

SELECT * FROM hochbezahlte_Mitarbeiter;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Ein DBA-Befehl zum erstellen eines Benutzers inklusive Profils mit den notwen-digen Berechtigungen
CREATE USER user_1 IDENTIFIED BY password;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--UPDATE-Befehele
-- Update des Lagerbestands der Artikel
UPDATE Lagerbestand SET bestand = bestand - 3 WHERE Lagerbestand_ID = 1;
UPDATE Lagerbestand SET bestand = bestand - 1 WHERE Lagerbestand_ID = 2;

SELECT privilege
FROM user_tab_privs
WHERE table_name = 'DBMS_CRYPTO';

SELECT * FROM Bestellungen;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Fehlende Berechtigung für DBMS_Crypto
SELECT * 
FROM USER_TAB_PRIVS 
WHERE TABLE_NAME = 'DBMS_CRYPTO';
Ausgabe: Keine Zeilen ausgewählt
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
--Whitelist-Validierung für das Material
DROP TABLE erlaubtes_Material;
--Eine Tabelle mit dem erlaubten Material
CREATE TABLE erlaubtes_Material (
    Material VARCHAR2(50) PRIMARY KEY
);

INSERT INTO erlaubtes_Material (Material) VALUES ('Textil');
INSERT INTO erlaubtes_Material (Material) VALUES ('Polyester');
INSERT INTO erlaubtes_Material (Material) VALUES ('Baumwolle');

--Material das hinzugefügt werden soll kommt in den Parameter
--wenn es auf der Whitelist steht, kann es  hinzugefügt werden, sonst nicht
CREATE OR REPLACE PROCEDURE material_validierung (sw_material IN VAR-CHAR2) IS
    sw_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO sw_count
    FROM erlaubtes_material
    WHERE Material = sw_material;

-- Wenn die Farbe nicht in der Whitelist ist, wird eine Fehlermeldung ausgelöst
    IF sw_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ungültiges Material.');
    END IF;
    
       IF sw_material IS NULL THEN
               RAISE_APPLICATION_ERROR(-20002, 'Ein Fehler ist aufgetreten: ' || SQLERRM);
    END IF;
END;


DROP TRIGGER material_check_white;

--Trigger der vor einer Eingabe in die Tabelle die Blacklist überprüft
CREATE OR REPLACE TRIGGER material_check_white
BEFORE INSERT ON Streetwear
FOR EACH ROW
BEGIN
    material_validierung(:NEW.material);
END;

--Testdaten
INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Jacke', 'Oberteile', 'Eine schicke Jacke.', 45.00, 35, 'Kunstleder', 'XL', 'Grau', 'Puma');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Blacklist-Validierung für das Material
DROP TABLE nicht_erlaubtes_Material;
--Eine Tabelle mit dem verbotenen Material
CREATE TABLE nicht_erlaubtes_Material (
    Material VARCHAR2(50) PRIMARY KEY
);

INSERT INTO nicht_erlaubtes_Material (Material) VALUES ('Kunstleder');
INSERT INTO nicht_erlaubtes_Material (Material) VALUES ('Daunen');
INSERT INTO nicht_erlaubtes_Material (Material) VALUES ('Leder');

--Material das hinzugefügt werden soll kommt in den Parameter
--wenn es auf der Blacklist steht, kann es nicht hinzugefügt werden
CREATE OR REPLACE PROCEDURE material_validierung (sw_material IN VAR-CHAR2) AS
    sw_count NUMBER;
BEGIN
-- Überprüfen, ob das Material in der Liste der nicht erlaubten Materialien ist
    SELECT COUNT(*)
    INTO sw_count
    FROM nicht_erlaubtes_Material
    WHERE Material = sw_material;

-- Wenn die Farbe in der Blacklist ist, wird eine Fehlermeldung ausgelöst
    IF sw_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ungültiges Material.');
    END IF;

    IF sw_material IS NULL THEN
               RAISE_APPLICATION_ERROR(-20002, 'Ein Fehler ist aufgetreten: ' || SQLERRM);
    END IF;
END;

DROP TRIGGER material_check_black;

--Trigger der vor einer Eingabe in die Tabelle die Blacklist überprüft
DROP TRIGGER material_check_black;
CREATE OR REPLACE TRIGGER material_check_black
BEFORE INSERT ON Streetwear
FOR EACH ROW
BEGIN
    material_validierung(:NEW.material);

END;

--Testdaten
INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Jacke', 'Oberteile', 'Eine schicke Jacke.', 45.00, 35, "Kunstleder", 'XL', 'Grau', 'Puma');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Fehlermeldungen mit SQLERRM und SQLCODE
SET SERVEROUTPUT ON;
BEGIN  
DBMS_OUTPUT.PUT_LINE('Fehlercode: ' || SQLCODE);
DBMS_OUTPUT.PUT_LINE('Fehlermeldung: ' || SQLERRM);
END;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--DROP-Befehle zum löschen
DROP TABLE Ut_Vorgesetzte CASCADE CONSTRAINTS;
DROP TABLE Ut_Mitarbeiter CASCADE CONSTRAINTS;
DROP TABLE streetwear CASCADE CONSTRAINTS;
DROP TABLE sportartikel CASCADE CONSTRAINTS;
DROP TABLE Nicht_Veroeffentlichte_Projekte CASCADE CONSTRAINTS;
DROP TABLE Bestellungen CASCADE CONSTRAINTS;
DROP TABLE Lagerbestand CASCADE CONSTRAINTS;
DROP TABLE Abteilung CASCADE CONSTRAINTS;

DROP SEQUENCE ma_sq;
DROP SEQUENCE vg_sq;
DROP SEQUENCE sw_sq;
DROP SEQUENCE sp_sq;
DROP SEQUENCE np_sq;
DROP SEQUENCE bst_sq;
DROP SEQUENCE lg_sq;
DROP SEQUENCE abt_sq;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Erstellen von Sequenzen und Tabellen

CREATE SEQUENCE ma_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE vg_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE sw_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE sp_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE np_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE bst_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE lg_sq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE abt_sq START WITH 1 INCREMENT BY 1;


CREATE TABLE Streetwear (
    SW_Artikel_ID INT PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Kategorie VARCHAR2(50),
    Beschreibung VARCHAR2(200),
    Preis NUMBER,
    Bestand NUMBER,
    Material VARCHAR2(100),
    Groesse VARCHAR2(25),
    Farbe VARCHAR2(50),
    Marke VARCHAR2(100)
);
ALTER TABLE streetwear
ADD CONSTRAINT check_groesse
CHECK (groesse != 'XXL');


CREATE TABLE Sportartikel (
    SP_Artikel_ID INT PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Kategorie VARCHAR2(50),
    Beschreibung VARCHAR2(200),
    Preis NUMBER,
    Bestand NUMBER,
    Material VARCHAR2(100),
    Groesse VARCHAR2(25),
    Farbe VARCHAR2(50),
    Marke VARCHAR2(100)
);

CREATE TABLE Lagerbestand (
    Lagerbestand_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Kategorie VARCHAR2(50),
    Beschreibung VARCHAR2(200),
    Preis NUMBER,
    Bestand NUMBER,
    Material VARCHAR2(100),
    Groesse VARCHAR2(25),
    Farbe VARCHAR2(50),
    Marke VARCHAR2(100),
    sw_artikel_id INT,
    sp_artikel_id INT
);
ALTER TABLE Lagerbestand
ADD(CONSTRAINT lg_sw_fk FOREIGN KEY (sw_artikel_id)
REFERENCES streetwear(sw_artikel_id));

ALTER TABLE Lagerbestand
ADD(CONSTRAINT lg_sp_fk FOREIGN KEY (sp_artikel_id)
REFERENCES Sportartikel(sp_artikel_id));


CREATE TABLE Abteilung (
    Abteilungs_ID INT PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Standort VARCHAR2(50)
);

CREATE TABLE Ut_Mitarbeiter (
    Mitarbeiter_ID INT PRIMARY KEY,
    Vorname VARCHAR2(50),
    Nachname VARCHAR2(50),
    Position VARCHAR2(100),
    Gehalt NUMBER,
    Abteilungs_ID INT,
    Geburtsdatum DATE
);
ALTER TABLE Ut_Mitarbeiter
ADD(CONSTRAINT abt_fk FOREIGN KEY (Abteilungs_ID)
REFERENCES Abteilung(Abteilungs_ID));

CREATE TABLE Ut_Vorgesetzte (
    Vorgesetzte_ID INT PRIMARY KEY,
    Vorname VARCHAR2(50),
    Nachname VARCHAR2(50),
    Position VARCHAR2(100),
    Gehalt NUMBER,
    Abteilungs_ID INT,
    Geburtsdatum DATE,
    Mitarbeiter_ID INT
);
ALTER TABLE Ut_Vorgesetzte
ADD(CONSTRAINT mi_fk FOREIGN KEY (Mitarbeiter_ID)
REFERENCES Ut_Mitarbeiter(Mitarbeiter_ID));

ALTER TABLE Ut_Vorgesetzte
ADD(CONSTRAINT abt_fk2 FOREIGN KEY (Abteilungs_ID)
REFERENCES Abteilung(Abteilungs_ID));


CREATE TABLE Bestellungen (
    Bestell_ID INT PRIMARY KEY,
    Menge NUMBER,
    Einzelpreis DECIMAL(10, 2),
    Gesamtpreis DECIMAL(10, 2) DEFAULT NULL,
    SP_Artikel_ID INT,
    SW_Artikel_ID INT,
    Mitarbeiter_ID INT
    );
ALTER TABLE Bestellungen
ADD(CONSTRAINT ma_fk FOREIGN KEY (Mitarbeiter_ID)
REFERENCES Ut_Mitarbeiter(Mitarbeiter_ID));

ALTER TABLE Bestellungen
ADD(CONSTRAINT sp_fk FOREIGN KEY (sp_artikel_id)
REFERENCES Sportartikel(sp_Artikel_ID));

ALTER TABLE Bestellungen
ADD(CONSTRAINT sw_fk FOREIGN KEY (sw_artikel_id)
REFERENCES streetwear(sw_artikel_ID));


CREATE TABLE Nicht_Veroeffentlichte_Projekte (
    ProjektID INT PRIMARY KEY,
    Bezeichnung VARCHAR2(50),
    Beschreibung VARCHAR2(500),
    Startdatum DATE,
    Enddatum DATE,
    Status VARCHAR2(50),
    Verantwortlicher INT,
    Mitarbeiter INT
);
ALTER TABLE Nicht_Veroeffentlichte_Projekte
ADD(CONSTRAINT vp_fk FOREIGN KEY (Verantwortlicher) 
REFERENCES Ut_Vorgesetzte(Vorgesetzte_ID));

ALTER TABLE Nicht_Veroeffentlichte_Projekte 
ADD(CONSTRAINT mp_fk FOREIGN KEY (Mitarbeiter) 
REFERENCES Ut_Mitarbeiter(Mitarbeiter_ID));

ALTER TABLE Nicht_Veroeffentlichte_Projekte
ADD (hashwert NUMBER);
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Erzeugen von TRIGGERn

--TRIGGER für Gesamtpreis
CREATE OR REPLACE TRIGGER berechne_gesamtpreis
BEFORE INSERT OR UPDATE ON Bestellungen
FOR EACH ROW
BEGIN
    IF :NEW.sp_artikel_id IS NOT NULL THEN
        :NEW.gesamtpreis := :NEW.einzelpreis * :NEW.menge;
    ELSIF :NEW.sw_Artikel_ID IS NOT NULL THEN
        :NEW.gesamtpreis := :NEW.einzelpreis * :NEW.menge;
    END IF;
END;

--TRIGGER zum automatischen einfügen von Datensätzen in die Tabelle Lagerbe-stand
CREATE OR REPLACE TRIGGER Streetwear_After_Insert
AFTER INSERT ON Streetwear
FOR EACH ROW
BEGIN
    INSERT INTO Lagerbestand (Bezeichnung, Kategorie, Beschreibung, Preis, Be-stand, Material, Groesse, Farbe, Marke)
    VALUES (:NEW.Bezeichnung, :NEW.Kategorie, :NEW.Beschreibung, :NEW.Preis, :NEW.Bestand, :NEW.Material, :NEW.Groesse, :NEW.Farbe, :NEW.Marke);
END;


CREATE OR REPLACE TRIGGER Sportartikel_After_Insert
AFTER INSERT ON Sportartikel
FOR EACH ROW
BEGIN
    INSERT INTO Lagerbestand (Bezeichnung, Kategorie, Beschreibung, Preis, Be-stand, Material, Groesse, Farbe, Marke)
    VALUES (:NEW.Bezeichnung, :NEW.Kategorie, :NEW.Beschreibung, :NEW.Preis, :NEW.Bestand, :NEW.Material, :NEW.Groesse, :NEW.Farbe, :NEW.Marke);
END;

--Trigger um ein Lost-Update zu verhindern
CREATE OR REPLACE TRIGGER lost_update
BEFORE UPDATE ON Lagerbestand
FOR EACH ROW
BEGIN
    IF :OLD.Bestand != :NEW.Bestand THEN
        RAISE_APPLICATION_ERROR(-20001, 'Datensatz wurde von einer anderen Transaktion geändert.');
    END IF;
END;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Inserts in Abteilungen
INSERT INTO Abteilung (Abteilungs_ID, Bezeichnung, Standort) 
VALUES 
(abt_sq.NEXTVAL, 'Management', 'Köln');

INSERT INTO Abteilung (Abteilungs_ID, Bezeichnung, Standort) 
VALUES 
(abt_sq.NEXTVAL, 'Verkauf', 'Köln');

INSERT INTO Abteilung (Abteilungs_ID, Bezeichnung, Standort) 
VALUES 
(abt_sq.NEXTVAL, 'Marketing', 'Gummersbach');



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Inserts in Mitarbeiter

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum)
VALUES(ma_sq.NEXTVAL, 'Anna', 'Schmidt', 'Manager', 3600, 1, TO_DATE('1988.09.20', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum)
VALUES(ma_sq.NEXTVAL,'Peter', 'Müller', 'Vertrieb', 3500, 1, TO_DATE('1985-02-10', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum)
VALUES (ma_sq.NEXTVAL, 'Hans', 'Schulz', 'Consultant', 3800, 1, TO_DATE('1987-07-12', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Carina', 'Wagner', 'Kassierer', 2100, 2, TO_DATE('1986-03-08', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Carina', 'Wagner', 'Verkäufer', 2400, 2, TO_DATE('1986-03-08', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES 
(ma_sq.NEXTVAL, 'Max', 'Meier', 'Verkäufer', 2400, 2, TO_DATE('1990.05.15', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum)
VALUES (ma_sq.NEXTVAL,'Laura', 'Meier', 'Ideation', 3200, 3, TO_DATE('1992-11-25', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Julia', 'Klein', 'Ideation', 3200, 3, TO_DATE('1991-06-18', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Erik', 'Lange', 'Analyst', 3400, 3, TO_DATE('1989-10-30', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Sarah', 'Schneider', 'Abteilungsleiter', 7500, 1, TO_DATE('1978-08-15', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Jannick', 'Jamann', 'Abteilungsleiter', 6000, 2, TO_DATE('1992-02-23', 'YYYY-MM-DD'));

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Lothar', 'Schwarz', 'Abteilungsleiter', 6600, 3, TO_DATE('1980-04-25', 'YYYY-MM-DD'));

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Inserts in Vorgesetzte
INSERT INTO Ut_Vorgesetzte(Vorgesetzte_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum, Mitarbeiter_ID) 
VALUES 
(vg_sq.NEXTVAL, 'Sarah', 'Schneider', 'Abteilungsleiter', 7500, 1, TO_DATE('1978-08-15', 'YYYY-MM-DD'), 1);

INSERT INTO Ut_Mitarbeiter (Mitarbeiter_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum) 
VALUES (ma_sq.NEXTVAL, 'Jannick', 'Jamann', 'Abteilungsleiter', 6000, 2, TO_DATE('1992-02-23', 'YYYY-MM-DD'));

INSERT INTO Ut_Vorgesetzte(Vorgesetzte_ID, Vorname, Nachname, Position, Gehalt, Abteilungs_ID, Geburtsdatum, Mitarbeiter_ID) 
VALUES 
(vg_sq.NEXTVAL, 'Lothar', 'Schwarz', 'Abteilungsleiter', 6600, 3, TO_DATE('1980-04-25', 'YYYY-MM-DD'), 3);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Inserts in Streetwear
INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES 
(sw_sq.NEXTVAL, 'T-Shirt', 'Oberteile', 'Ein bequemes T-Shirt aus Baumwolle.', 20.00, 50, 'Baumwolle', 'M', 'Weiß', 'Puma');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Hoodie', 'Oberteile', 'Ein warmer Kapuzenpullover.', 40.00, 40, 'Baumwolle', 'L', 'Grau', 'Nike');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Sneakers', 'Schuhe', 'Stylische Sneakers für den Alltag.', 60.00, 25, 'Textil', '39', 'Schwarz', 'Adidas');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Shorts', 'Hosen', 'Kurze Shorts für den Sommer.', 30.00, 35, 'Baumwolle', 'S', 'Grün', 'Jako');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL,'Trainingshose', 'Hosen', 'Ein luftdurchlässiger Trainingsan-zug.', 35.00, 30, 'Polyester', 'M', 'Schwarz', 'Hummel');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Cap', 'Accessoires', 'Eine stylische Baseballkappe.', 25.00, 45, 'Textil', 'Einheitsgröße', 'Rot', 'Ellesse');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Jacke', 'Oberteile', 'Eine leichte Jacke für den Übergang.', 70.00, 20, 'Polyester', 'XL', 'Blau', 'New Era');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'T-Shirt', 'Oberteile', 'Ein sportliches T-Shirt.', 20.00, 50, 'Baumwolle', 'L', 'Weiß', 'Under Armour');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Shorts', 'Hosen', 'Leichte Shorts für Training und Freizeit.', 30.00, 40, 'Polyester', 'M', 'Blau', 'Champion');

INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Hoodie', 'Oberteile', 'Ein bequemer Kapuzenpullover.', 45.00, 35, 'Baumwolle', 'XL', 'Grau', 'Puma');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Inserts in Sportartikel
INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Fußball', 'Fußball', 'Ein gut verarbeiteter Fußball.', 25.00, 50, 'Leder', '5', 'Weiß', 'Adidas');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Laufschuhe', 'Schuhe', 'Leichte Laufschuhe mit guter Pols-terung.', 80.00, 30, 'Mesh', '42', 'Schwarz', 'Nike');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Tennisschläger', 'Tennis', 'Ein hochwertiger Tennisschläger für Wettkämpfe.', 120.00, 20, 'Graphit', 'M', 'Rot', 'Wilson');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Handball', 'Handball', 'Ein hochwertiger Handball mit festem Griff.', 30.00, 40, 'Synthetik', '1', 'Blau', 'Molten');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Basketball', 'Basketball', 'Ein schwarzer Basketball mit orangenen Streifen.', 40.00, 35, 'Gummi', '7', 'Orange', 'Spalding');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Golfbälle', 'Golf', 'Eine Packung mit hochwertigen Golfbäl-len.', 20.00, 25, 'Kunststoff', NULL, 'Weiß', 'Titleist');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Fahrradhelm', 'Fahrrad', 'Ein sicherer Fahrradhelm für Rad-fahrer', 50.00, 45, 'Polycarbonat', NULL, 'Rot', 'Bell');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Schwimmbrille', 'Schwimmen', 'Eine bequeme Schwimmbril-le.', 15.00, 60, 'Kunststoff', NULL, 'Blau', 'Speedo');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Skateboard', 'Skateboarding', 'Ein hochwertiges Skate-board.', 70.00, 20, 'Holz', '8', 'Blau', 'Element');

INSERT INTO Sportartikel (sp_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke)
VALUES(sp_sq.NEXTVAL, 'Jogginganzug', 'Laufen', 'Ein bequemer Jogginganzug.', 60.00, 30, 'Baumwolle', NULL, 'Grau', 'Nike');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Inserts in Nicht veröffentlichte Projekte
INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Sportartikel-Innovation', 'Forschungs- und Entwicklungspro-jek', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 1, 2);

INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Sportartikel-Innovation', 'Forschungs- und Entwicklungspro-jek', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 1, 3);

INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Sportartikel-Innovation', 'Forschungs- und Entwicklungspro-jek', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 1, 4);

INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Neues Sneaker-Design', 'Entwicklung eines neuen Sneak-er-Designs.', TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-09-30', 'YYYY-MM-DD'), 2, 1);

INSERT INTO Nicht_Veroeffentlichte_Projekte(ProjektID, Bezeichnung, Beschreibung, Startdatum, Enddatum, Verantwortlicher, Mitarbeiter) 
VALUES(np_sq.NEXTVAL, 'Neues Sneaker-Design', 'Entwicklung eines neuen Sneak-er-Designs.', TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-09-30', 'YYYY-MM-DD'), 2, 5);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Inserts in Bestellungen
INSERT INTO bestellungen (bestell_id, menge, einzelpreis, sp_artikel_id, sw_artikel_id, mitarbeiter_id)
VALUES (bst_sq.NEXTVAL, 5, 30.00, 3, NULL, 2);

INSERT INTO bestellungen (bestell_id, menge, einzelpreis, sp_artikel_id, sw_artikel_id, mitarbeiter_id)
VALUES (bst_sq.NEXTVAL, 2, 15.00, NULL, 1, 4);

INSERT INTO bestellungen (bestell_id, menge, einzelpreis, sp_artikel_id, sw_artikel_id, mitarbeiter_id)
VALUES (bst_sq.NEXTVAL, 3, 45.00, NULL, 1, 4);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Anzeige aller Tabellen mithilfe der SELECT-Anweisung
SELECT*FROM streetwear;
SELECT*FROM Sportartikel;
SELECT*FROM Nicht_Veroeffentlichte_Projekte;
SELECT*FROM ut_mitarbeiter;
SELECT*FROM ut_vorgesetzte;
SELECT*FROM Bestellungen;
SELECT*FROM Lagerbestand;
SELECT*FROM Abteilung;

--SELECT-Abfrage zur Ausgabe von Mitarbeitern über 35
SELECT DISTINCT mitarbeiter_id, nachname, geburtsdatum
FROM ut_mitarbeiter 
GROUP BY mitarbeiter_id, nachname, geburtsdatum
HAVING (SYSDATE - geburtsdatum) > 35*365
ORDER BY mitarbeiter_id ASC;

--Ein einfacher Join zur Ausgabe der Vorgesetzten über 44
SELECT DISTINCT m.mitarbeiter_id, m.nachname, m.geburtsdatum
FROM ut_mitarbeiter m 
JOIN ut_vorgesetzte v ON m.nachname = v.nachname
WHERE v.vorgesetzte_id IS NOT NULL
AND (SYSDATE - m.geburtsdatum) > 44*365
ORDER BY m.mitarbeiter_id ASC;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--VIEWS
DROP VIEW vw_ut_mitarbeiter;
CREATE VIEW vw_ut_mitarbeiter AS
SELECT*FROM ut_mitarbeiter;
SELECT*FROM vw_ut_mitarbeiter;
GRANT SELECT ON vw_ut_mitarbeiter TO user_1;

DROP VIEW Mitarbeiter_View;
CREATE VIEW Mitarbeiter_View AS
SELECT * FROM ut_Mitarbeiter;

--Eingeschränkte Spalten
DROP VIEW Mitarbeiter_Namen;
CREATE VIEW Mitarbeiter_Namen AS
SELECT Vorname, Nachname FROM ut_Mitarbeiter;


--Aggregation in der View
DROP VIEW gehalt_sum_abt;
CREATE VIEW gehalt_sum_abt AS
SELECT Abteilungs_ID, SUM(Gehalt) AS Gesamtgehalt
FROM ut_Mitarbeiter
GROUP BY Abteilungs_ID;

SELECT * FROM gehalt_sum_abt;

--Verknüpfte Tabellen in der View
DROP VIEW Mitarbeiter_Information;
CREATE VIEW Mitarbeiter_Information AS
SELECT M.Vorname, M.Nachname, A.Bezeichnung
FROM ut_Mitarbeiter M
JOIN Abteilung A ON M.Abteilungs_ID = A.Abteilungs_ID;

SELECT * FROM Mitarbeiter_Information;

--View mit Bedingung
DROP VIEW hochbezahlte_Mitarbeiter;
CREATE VIEW Hochbezahlte_Mitarbeiter AS
SELECT Vorname, Nachname, Gehalt
FROM ut_Mitarbeiter
WHERE Gehalt > 6000;    

SELECT * FROM hochbezahlte_Mitarbeiter;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Ein DBA-Befehl zum erstellen eines Benutzers inklusive Profils mit den notwen-digen Berechtigungen
CREATE USER user_1 IDENTIFIED BY password;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--UPDATE-Befehele
-- Update des Lagerbestands der Artikel
UPDATE Lagerbestand SET bestand = bestand - 3 WHERE Lagerbestand_ID = 1;
UPDATE Lagerbestand SET bestand = bestand - 1 WHERE Lagerbestand_ID = 2;

SELECT privilege
FROM user_tab_privs
WHERE table_name = 'DBMS_CRYPTO';

SELECT * FROM Bestellungen;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Fehlende Berechtigung für DBMS_Crypto
SELECT * 
FROM USER_TAB_PRIVS 
WHERE TABLE_NAME = 'DBMS_CRYPTO';
Ausgabe: Keine Zeilen ausgewählt
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
--Whitelist-Validierung für das Material
DROP TABLE erlaubtes_Material;
--Eine Tabelle mit dem erlaubten Material
CREATE TABLE erlaubtes_Material (
    Material VARCHAR2(50) PRIMARY KEY
);

INSERT INTO erlaubtes_Material (Material) VALUES ('Textil');
INSERT INTO erlaubtes_Material (Material) VALUES ('Polyester');
INSERT INTO erlaubtes_Material (Material) VALUES ('Baumwolle');

--Material das hinzugefügt werden soll kommt in den Parameter
--wenn es auf der Whitelist steht, kann es  hinzugefügt werden, sonst nicht
CREATE OR REPLACE PROCEDURE material_validierung (sw_material IN VAR-CHAR2) IS
    sw_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO sw_count
    FROM erlaubtes_material
    WHERE Material = sw_material;

-- Wenn die Farbe nicht in der Whitelist ist, wird eine Fehlermeldung ausgelöst
    IF sw_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ungültiges Material.');
    END IF;
    
       IF sw_material IS NULL THEN
               RAISE_APPLICATION_ERROR(-20002, 'Ein Fehler ist aufgetreten: ' || SQLERRM);
    END IF;
END;


DROP TRIGGER material_check_white;

--Trigger der vor einer Eingabe in die Tabelle die Blacklist überprüft
CREATE OR REPLACE TRIGGER material_check_white
BEFORE INSERT ON Streetwear
FOR EACH ROW
BEGIN
    material_validierung(:NEW.material);
END;

--Testdaten
INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Jacke', 'Oberteile', 'Eine schicke Jacke.', 45.00, 35, 'Kunstleder', 'XL', 'Grau', 'Puma');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Blacklist-Validierung für das Material
DROP TABLE nicht_erlaubtes_Material;
--Eine Tabelle mit dem verbotenen Material
CREATE TABLE nicht_erlaubtes_Material (
    Material VARCHAR2(50) PRIMARY KEY
);

INSERT INTO nicht_erlaubtes_Material (Material) VALUES ('Kunstleder');
INSERT INTO nicht_erlaubtes_Material (Material) VALUES ('Daunen');
INSERT INTO nicht_erlaubtes_Material (Material) VALUES ('Leder');

--Material das hinzugefügt werden soll kommt in den Parameter
--wenn es auf der Blacklist steht, kann es nicht hinzugefügt werden
CREATE OR REPLACE PROCEDURE material_validierung (sw_material IN VAR-CHAR2) AS
    sw_count NUMBER;
BEGIN
-- Überprüfen, ob das Material in der Liste der nicht erlaubten Materialien ist
    SELECT COUNT(*)
    INTO sw_count
    FROM nicht_erlaubtes_Material
    WHERE Material = sw_material;

-- Wenn die Farbe in der Blacklist ist, wird eine Fehlermeldung ausgelöst
    IF sw_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ungültiges Material.');
    END IF;

    IF sw_material IS NULL THEN
               RAISE_APPLICATION_ERROR(-20002, 'Ein Fehler ist aufgetreten: ' || SQLERRM);
    END IF;
END;

DROP TRIGGER material_check_black;

--Trigger der vor einer Eingabe in die Tabelle die Blacklist überprüft
DROP TRIGGER material_check_black;
CREATE OR REPLACE TRIGGER material_check_black
BEFORE INSERT ON Streetwear
FOR EACH ROW
BEGIN
    material_validierung(:NEW.material);

END;

--Testdaten
INSERT INTO Streetwear (sw_Artikel_ID, Bezeichnung, Kategorie, Beschreibung, Preis, Bestand, Material, Groesse, Farbe, Marke) 
VALUES(sw_sq.NEXTVAL, 'Jacke', 'Oberteile', 'Eine schicke Jacke.', 45.00, 35, "Kunstleder", 'XL', 'Grau', 'Puma');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Fehlermeldungen mit SQLERRM und SQLCODE
SET SERVEROUTPUT ON;
BEGIN  
DBMS_OUTPUT.PUT_LINE('Fehlercode: ' || SQLCODE);
DBMS_OUTPUT.PUT_LINE('Fehlermeldung: ' || SQLERRM);
END;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
